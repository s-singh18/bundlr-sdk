"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebUploader = void 0;
const upload_1 = __importDefault(require("../common/upload"));
const arbundles_1 = require("arbundles");
class WebUploader extends upload_1.default {
    constructor(bundlr) {
        super(bundlr.api, bundlr.utils, bundlr.currency, bundlr.currencyConfig);
        this.bundlr = bundlr;
    }
    /**
     * Uploads a list of `File` objects & a generated folder manifest as a nested bundle using a temporary signing key.
     *
     * @param files list of `File` objects to upload - note: this code determines the paths via the File's `webkitRelativePath` property - if it's undefined, it falls back to file.name
     * @param {string} [opts.indexFileRelPath] Relative path for the index file, i.e `folder/index.html`
     * @param {string} [opts.manifestTags] List of tags to add onto the manifest transaction
     * @returns Standard upload response from the bundler node, plus the throwaway key & address, manifest, manifest TxId and the list of generated transactions
     */
    uploadFolder(files, opts) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const txs = [];
            const txMap = new Map();
            const throwawayKey = (_a = opts === null || opts === void 0 ? void 0 : opts.throwawayKey) !== null && _a !== void 0 ? _a : (yield this.bundlr.arbundles.getCryptoDriver().generateJWK());
            const ephemeralSigner = new arbundles_1.ArweaveSigner(throwawayKey);
            for (const file of files) {
                const path = file.webkitRelativePath ? file.webkitRelativePath : file.name;
                const hasContentType = file.tags ? file.tags.some(({ name }) => name.toLowerCase() === "content-type") : false;
                const tags = hasContentType ? file.tags : [...((_b = file.tags) !== null && _b !== void 0 ? _b : []), { name: "Content-Type", value: file.type }];
                const tx = this.bundlr.arbundles.createData(Buffer.from(yield file.arrayBuffer()), ephemeralSigner, {
                    tags,
                });
                yield tx.sign(ephemeralSigner);
                txs.push(tx);
                txMap.set(path, tx.id);
            }
            // generate manifest, add to bundle
            const manifest = yield this.generateManifest({ items: txMap, indexFile: opts === null || opts === void 0 ? void 0 : opts.indexFileRelPath });
            const manifestTx = this.bundlr.arbundles.createData(JSON.stringify(manifest), ephemeralSigner, {
                tags: [
                    { name: "Type", value: "manifest" },
                    { name: "Content-Type", value: "application/x.arweave-manifest+json" },
                    ...((_c = opts === null || opts === void 0 ? void 0 : opts.manifestTags) !== null && _c !== void 0 ? _c : []),
                ],
            });
            yield manifestTx.sign(ephemeralSigner);
            txs.push(manifestTx);
            // upload bundle
            const bundleRes = yield this.uploadBundle(txs, Object.assign({}, opts));
            return Object.assign(Object.assign({}, bundleRes.data), { manifestId: manifestTx.id, manifest, throwawayKey: bundleRes.throwawayKey, throwawayKeyAddress: bundleRes.throwawayKeyAddress, txs: bundleRes.txs });
        });
    }
}
exports.WebUploader = WebUploader;
//# sourceMappingURL=upload.js.map